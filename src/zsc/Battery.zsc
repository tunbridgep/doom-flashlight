class Battery : Inventory
{

    private int battery_level;
    private int battery_mode;
    private int battery_max;
    private int battery_minimum_threshold;
    private int battery_use_per_tic;
    private int battery_charge_per_tic;
    private int red_tics;
    
    private bool inUse;

    override void BeginPlay()
    {
        updateFromCVars();
        battery_level = GetMax();
    }

    protected int numBatteryRecharges()
    {
        int re;
        if (owner != null)
            re = owner.CountInv("FlashlightBatteryRecharge");
        return re;
    }
    
    protected int numBatteryUpgrades()
    {
        int re;
        if (owner != null)
            re = owner.CountInv("FlashlightBatteryUpgrade");
        return re;
    }
    
    protected void updateFromCVars()
    {
        battery_max = CVar.FindCVar("flashlight_battery_max").GetInt();
        battery_mode = CVar.FindCVar("flashlight_battery_mode").GetInt();
        battery_minimum_threshold = CVar.FindCVar("flashlight_battery_min_threshold").GetInt();
        battery_use_per_tic = CVar.FindCVar("flashlight_battery_use_per_tic").GetInt();
        battery_charge_per_tic = CVar.FindCVar("flashlight_battery_charge_per_tic").GetInt();
    }

    bool CanUseRecharger()
    {
        return numBatteryrecharges() > 0 && battery_mode != 0;
    }
    
    void SetRed(int tics)
    {
        red_tics = tics;
    }
    
    void DrawIndicator()
    {
        if (owner != null && battery_use_per_tic > 0 && battery_mode != 0)
        {
            owner.ACS_NamedExecute("draw_battery",0,battery_level,GetMax(),red_tics);
            red_tics = Math.ClampMin(red_tics - 1,0);
        }
    }

    void UseRecharger()
    {
        if (CanUseRecharger())
        {
            updateFromCvars();
            battery_level = GetMax();
            owner.TakeInventory("FlashlightBatteryRecharge",1);
        }
    }
    
    bool IsEmpty()
    {
        return battery_level == 0;
    }
    
    void SetInUse(bool use)
    {
        inUse = use;
    }
    
    bool ValueBelowThreshold()
    {
        updateFromCvars();
        return battery_level < battery_minimum_threshold && battery_mode != 0;
    }
    
    int GetLevel()
    {
        return battery_level;
    }
    
    int GetMax()
    {
        return battery_max + (1 * numBatteryUpgrades());
    }
    
    override void Tick()
    {
        updateFromCvars();
        if (battery_mode == 0)
            return;

        if (inUse)
            battery_level = Math.Clamp(battery_level - battery_use_per_tic,0,GetMax());
        else
            battery_level = Math.Clamp(battery_level + battery_charge_per_tic,0,GetMax());
        super.Tick();
    }
}
