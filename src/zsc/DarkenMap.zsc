class DarkenMap : EventHandler
{
    enum DarkenMode
	{
		EVERYTHING = 0,
		SIMPLE_THRESHOLD = 1,
	};

    void DarkenMap(DarkenMode mode, int amount, int threshold)
    {
        int modified_sectors = 0;
        int nsectors = level.sectors.size();
      
        for (int i = 0; i < nsectors;i++)
        {
            int light_level = level.sectors[i].lightLevel;
            
            if (light_level < threshold || mode == EVERYTHING)
            {
                int new_level = Math.ClampMin(light_level - amount,0);
                level.sectors[i].lightLevel = new_level;
                modified_sectors++;
                Debug.LogVerbose("Darkened Sector with light level "..light_level.." to "..new_level);
            }
        }
        Debug.LogVerbose(modified_sectors.." sectors were darkened");
    }
    
    void StealthMonsters(Actor monster,int chance, int threshold, bool require_threshold)
    {
        int light_level = monster.cursector.lightlevel;
        if (light_level <= threshold || !require_threshold)
        {
            int dice = random(0, 100);
            //Debug.Log("Rolled a "..dice);
            
            if (dice <= chance)
            {
                Debug.LogVerbose("Monster "..monster.GetTag().." was replaced with a Stealth variant in sector with light level of "..light_level);
                monster.bSTEALTH = true;
            }
        }
    }
    
    override void WorldLoaded(WorldEvent e)
    {
        if (e.IsReopen)
            return;
            
        DarkenMode mode = CVar.FindCVar("flashlight_darken_mode").GetInt();
        int threshold = CVar.FindCVar("flashlight_darken_threshold").GetInt();
        int amount = CVar.FindCVar("flashlight_darken_amount").GetInt();
        
        DarkenMap(mode,amount,threshold);
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        if (e.Thing.bISMONSTER)
        {
            int stealth_monster_chance = CVar.FindCVar("flashlight_stealth_monster_chance").GetInt();
            int stealth_monster_threshold = CVar.FindCVar("flashlight_stealth_monster_threshold").GetInt();
            bool stealth_require_threshold = CVar.FindCVar("flashlight_stealth_monster_require_threshold").GetBool();
        
            StealthMonsters(e.Thing,stealth_monster_chance,stealth_monster_threshold,stealth_require_threshold);
        }
    }
}
