class PlayerStealth : FlashlightEventHandler
{
    override void UniquePlayerEntered(Actor Player, bool reentered)
    {
        if (!reentered)
        {
            if (Player.CheckInventory("PlayerStealthItem",1))
                return;
            else
            {
                player.GiveInventory("PlayerStealthItem",1);
            }
        }
    }
}

class PlayerStealthItem : PermanentItem
{
    int stealth_time; //need to be in a dark area for long enough to trigger stealth
    const STEALTH_THRESHOLD = 35 * 2; //three seconds

    float UnitIntervalRange(float stageStartRange, float stageFinishRange, float newStartRange, float newFinishRange, float floatingValue)
    {
        float outRange = newFinishRange - newStartRange;
        float inRange = stageFinishRange - stageStartRange;
        float range = (outRange / inRange);
        return (newStartRange + (range * (floatingValue - stageStartRange)));
    }
    
    void DrawOverlay()
    {
        //let overlay = TexMan.CheckForTexture("F_SKY1",TexMan.TYPE_ANY,TexMan.DONTCREATE);
        //StatusBar.DrawTexture(overlay, false, 0, 0, DTA_Alpha, 1, DTA_320x200);
        //owner.ACS_ScriptCall("DrawStealthOverlay",UnitIntervalRange(0,STEALTH_THRESHOLD,0,1,stealth_time));
        owner.ACS_ScriptCall("DrawStealthOverlay");
        //owner.ACS_ScriptCall("DrawStealthOverlay",stealth_time,STEALTH_THRESHOLD);
    }
    
    override void DoEffect()
    {
        //If we have an invisibility item or turn off the feature, don't try and change our shadow flag
        if (owner.CheckInventory("PowerInvisibility",1) || !flashlight_stealth_player_enabled)
        {
            owner.ACS_ScriptCall("HideStealthOverlay");
            return;
        }
         
        int light_level = owner.cursector.lightlevel;      
        bool shadow = !owner.CheckInventory("StealthRemover",1) && flashlight_stealth_player_enabled && light_level <= flashlight_stealth_player_threshold && stealth_time >= STEALTH_THRESHOLD;
        
        if (light_level <= flashlight_stealth_player_threshold)
        {
            stealth_time++;
            //DrawOverlay();
        
            if (shadow)
            {
                owner.bSHADOW = true;
                DrawOverlay();
            }
        }
        else
        {
            stealth_time -= 10;
            if (stealth_time < 0)
                stealth_time = 0;
            
            owner.bSHADOW = false;
            owner.ACS_ScriptCall("HideStealthOverlay");
        }
    }
}
