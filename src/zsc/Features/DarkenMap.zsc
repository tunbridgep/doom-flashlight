class SectorInfo
{
    Sector sector;
	int originalLightLevel;
}

class DarkenMap : FlashlightEventHandler
{
	Array<SectorInfo> sectorInfos;

	void InitMapDarkener()
	{
		int total_sectors = level.sectors.size();
      
        for (int i = 0; i < total_sectors;i++)
        {
			SectorInfo info = new("SectorInfo");
			info.sector = level.sectors[i];
			info.originalLightLevel = (level.sectors[i].GetCeilingLight() + level.sectors[i].GetFloorLight()) / 2;
			//Debug.LogVerbose("Found Sector with light level "..info.originalLightLevel..". Adding to list");
			sectorInfos.Push(info);
		}
	}

    //darkens based on a curve - the closer it is to the threshold, the less it gets darkened
    int DarkenParabola(int light_level, int curve, int brightness, int adjust)
    {             
        //Please see the spreadsheet in the docs folder
        //curve == t and brightness == v light_level == in and adjust = p;
        //on the spreadsheet
        
        //brightness needs to start at 1 and end at 254 to prevent divide by 0
        curve = Math.Clamp(curve,1,254);
        
        int o;
        
        if (light_level <= curve)
        {
            //(in * v/t)
            float fcurve = curve;
            float fbrightness = brightness;
            float v_over_t = fbrightness / fcurve;
            o = Math.Round(v_over_t * light_level) - adjust;
        }
        else
        {
            //p + v + ( 255 - v ) * ( in - t ) / ( 255 - t )
            float a = 255 - brightness;
            float b = light_level - curve;
            float c = 255 - curve;
            
            o = Math.Round(brightness + ((a * b) / c));
        }
        return Math.Clamp(o,0,light_level);
    }
    
    int DarkenSimple(int light_level, int brightness)
    {
        return Math.Clamp(light_level - brightness,0,light_level);
    }
    
    int DarkenDivide(int light_level, float multiplier, int additional)
    {
        multiplier = Mathf.ClampMin(multiplier,0);
    
        int o = Math.Round(light_level / multiplier) - additional;
        return Math.Clamp(o,0,light_level);
    }
    
    int DarkenProportional(int light_level, float proportion)
    {
        float new_level = light_level - ((255 - light_level) * proportion);
        int o = Math.Round(new_level);
        return Math.Clamp(o,0,light_level);
    }
    
    void DarkenMap()
    {
		LightingMode mode = LightingConfig.GetMode();
				
        LinearInfo li;
        LightingConfig.GetLinearModeInfo(li);
        ParabolaInfo pi;
        LightingConfig.GetParabolaModeInfo(pi);
        DivideInfo di;
        LightingConfig.GetDivideModeInfo(di);
        PropInfo pri;
        LightingConfig.GetProportionalModeInfo(pri);
	      
        for (int i = 0; i < sectorInfos.Size();i++)
        {
            int new_level = sectorInfos[i].originalLightLevel;
            
            if (mode == LIGHTING_PARABOLA)
                new_level = DarkenParabola(new_level,pi.curve,pi.brightness,pi.adjust);
            else if (mode == LIGHTING_SIMPLE)
                new_level = DarkenSimple(new_level,li.amount);
            else if (mode == LIGHTING_DIVIDE)
                new_level = DarkenDivide(new_level,di.divide,di.additional);
            else if (mode == LIGHTING_PROPORTIONAL)
                new_level = DarkenProportional(new_level,pri.proportion);
				
			if (mode != LIGHTING_DISABLED)
				new_level = Math.ClampMax(new_level,flashlight_darken_max_brightness);
            
            sectorInfos[i].sector.SetLightLevel(new_level);
            Debug.LogVerbose("Darkened Sector with light level "..sectorInfos[i].originalLightLevel.." to "..new_level);
        }
        Debug.Log(sectorInfos.Size().." sectors were darkened");
    }
    
    override void UniqueWorldLoaded(WorldEvent e)
    {
		InitMapDarkener();
		DarkenMap();		
    }
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "flashlight_refresh")
		{
			DarkenMap();
		}
	}
}
