class DarkenMap : EventHandler
{

    //darkens based on a curve - the closer it is to the threshold, the less it gets darkened
    int DarkenParabola(int light_level, int curve, int brightness, int adjust)
    {             
        //Please see the spreadsheet in the docs folder
        //curve == t and brightness == v light_level == in and adjust = p;
        //on the spreadsheet
        
        //brightness needs to start at 1 and end at 254 to prevent divide by 0
        curve = Math.Clamp(curve,1,254);
        
        int o;
        
        if (light_level <= curve)
        {
            //(in * v/t)
            float fcurve = curve;
            float fbrightness = brightness;
            float v_over_t = fbrightness / fcurve;
            o = Math.Round(v_over_t * light_level) - adjust;
        }
        else
        {
            //p + v + ( 255 - v ) * ( in - t ) / ( 255 - t )
            float a = 255 - brightness;
            float b = light_level - curve;
            float c = 255 - curve;
            
            o = Math.Round(brightness + ((a * b) / c));
        }
        return Math.Clamp(o,0,255);
    }
    
    int DarkenSimple(int light_level, int brightness)
    {
        return Math.Clamp(light_level - brightness,0,255);
    }
    
    int DarkenDivide(int light_level, float multiplier, int additional)
    {
        multiplier = Mathf.ClampMin(multiplier,0);
    
        int o = Math.Round(light_level / multiplier) - additional;
        return Math.Clamp(o,0,255);
    }
    
    void DarkenMap(LightingMode mode, LinearInfo li, ParabolaInfo pi, DivideInfo di)
    {
        int nsectors = level.sectors.size();
        int modified_sectors = 0;
      
        for (int i = 0; i < nsectors;i++)
        {
            int average = (level.sectors[i].GetCeilingLight() + level.sectors[i].GetFloorLight()) / 2;
            int light_level = level.sectors[i].GetLightLevel();            

            int new_level = average;
            
            if (mode == LIGHTING_PARABOLA)
                new_level = DarkenParabola(average,pi.curve,pi.brightness,pi.adjust);
            else if (mode == LIGHTING_SIMPLE)
                new_level = DarkenSimple(average,li.amount);
            else if (mode == LIGHTING_DIVIDE)
                new_level = DarkenDivide(average,di.divide,di.additional);
            
            level.sectors[i].SetLightLevel(new_level);
            modified_sectors++;
            Debug.LogVerbose("Darkened Sector with light level "..light_level.." to "..new_level);
        }
        Debug.Log(modified_sectors.." sectors were darkened");
    }
    
    override void WorldLoaded(WorldEvent e)
    {
        LightingMode mode = LightingConfig.GetMode();
        LinearInfo linearinfo;
        LightingConfig.GetLinearModeInfo(linearinfo);
        ParabolaInfo parabolainfo;
        LightingConfig.GetParabolaModeInfo(parabolainfo);
        DivideInfo divideinfo;
        LightingConfig.GetDivideModeInfo(divideinfo);
        
        if (mode != LIGHTING_DISABLED && !e.IsReopen)
            DarkenMap(mode,linearinfo,parabolainfo,divideinfo);
    }
}
