class DropItemConfig : EventHandler
{
    Class<Actor> shotgunguy;
    Class<Actor> chaingunguy;
    Class<Actor> zombieman;

    override void OnRegister()
    {
        shotgunguy = "ShotgunGuy";
        chaingunguy = "ChaingunGuy";
        zombieman = "Zombieman";
    }

    override void CheckReplacement(ReplaceEvent e)
    {
        if (e.Replacee is shotgunguy && e.replacement)
            shotgunguy = e.replacement;
        else if (e.Replacee is chaingunguy && e.replacement)
            chaingunguy = e.replacement;
        else if (e.Replacee is zombieman && e.replacement)
            zombieman = e.replacement;
    }

    //This will give us more compatibility with other mods.
    //See here: https://zdoom.org/wiki/ZScript_classes
    private bool is_Class(Actor a, String classname)
    {
        Class<Actor> cls = classname;
        if (cls)
        {
            return a is cls;
        }
        return false;
    }

    private void DoAddDropItem(Actor a, string dropitem, int chance)
    {
        int dice = random(0, 100);
        
        string classname = "MissingNameOfClass";
        
        //Checking for zombie-men type enemies is DUMB!
        //No mod really wants to actually define them properly
        //So now we have this big list of garbage
        if ( a is "ZombieMan" || a is "ShotgunGuy" || a is "ChaingunGuy"
        || a is zombieman || a is chaingunguy || a is shotgunguy
        || a.Species == "Former Human" || is_Class(a,"SuicideBomber")
        || is_Class(a,"ZombieMan1") || is_Class(a,"ShotgunGuy1") || is_Class(a,"ChaingunGuy1")
        || is_Class(a,"PB_ZombieMan") || is_Class(a,"PB_ShotgunGuy") || is_Class(a,"PB_ChaingunGuy")
        || is_Class(a,"PB_ZombieScientist") || is_Class(a,"ZSpecOpsMachinegun"))
        {
            if (dice <= chance)
            {
                Debug.LogVerbose("Adding a "..dropitem.." to "..a.GetTag());
                a.GiveInventory(dropitem,1);
            }
        }
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (a && a.GetLevelSpawnTime() <= 5 && a.bIsMonster)
        {
            bool dropflash = CVar.FindCVar("flashlight_enemies_drop_flashlights").GetBool();
            bool dropflare = CVar.FindCVar("flashlight_enemies_drop_flares").GetBool();
            bool dropbattery = CVar.FindCVar("flashlight_enemies_drop_battery").GetBool();
            bool dropbattery_exp = CVar.FindCVar("flashlight_enemies_drop_battery_expander").GetBool();
            int dropflash_chance = CVar.FindCVar("flashlight_enemies_drop_flashlights_chance").GetInt();
            int dropflare_chance = CVar.FindCVar("flashlight_enemies_drop_flares_chance").GetInt();
            int dropbattery_chance = CVar.FindCVar("flashlight_enemies_drop_battery_chance").GetInt();
            int dropbattery_exp_chance = CVar.FindCVar("flashlight_enemies_drop_battery_expander_chance").GetInt();

            
            if (dropflash)
                DoAddDropItem(a,"FlashlightDropper",dropflash_chance);
            if (dropflare)
                DoAddDropItem(a,"FlareDropper",dropflare_chance);
            if (dropbattery)
                DoAddDropItem(a,"BatteryDropper",dropbattery_chance);
            if (dropbattery_exp)
                DoAddDropItem(a,"BatteryExpanderDropper",dropbattery_exp_chance);
        }
    }
}

//This item will drop a flashlight upon it's owner dying
class FlashlightDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("Flashlight");
        super.OwnerDied();
    }
}

class FlareDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("Flare");
        super.OwnerDied();
    }
}

class BatteryDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("FlashlightBatteryRecharge");
        super.OwnerDied();
    }
}

class BatteryExpanderDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("FlashlightBatteryUpgrade");
        super.OwnerDied();
    }
}
