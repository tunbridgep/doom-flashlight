class DropItems : EventHandler
{
    Class<Actor> shotgunguy;
    Class<Actor> chaingunguy;
    Class<Actor> zombieman;

    override void OnRegister()
    {
        shotgunguy = "ShotgunGuy";
        chaingunguy = "ChaingunGuy";
        zombieman = "Zombieman";
    }

    override void CheckReplacement(ReplaceEvent e)
    {
        if (e.Replacee is shotgunguy && e.replacement)
            shotgunguy = e.replacement;
        else if (e.Replacee is chaingunguy && e.replacement)
            chaingunguy = e.replacement;
        else if (e.Replacee is zombieman && e.replacement)
            zombieman = e.replacement;
    }

    //Checking for zombie-men type enemies is DUMB!
    //No mod really wants to actually define them properly
    //So now we have this big list of garbage
    private bool IsZombieman(Actor a)
    {
        return a.bIsMonster && ( a is "ZombieMan" || a is "ShotgunGuy" || a is "ChaingunGuy"
        || a is zombieman || a is chaingunguy || a is shotgunguy
        || a.Species == "Former Human" || ActorUtil.isClass(a,"SuicideBomber")
        || ActorUtil.isClass(a,"ZombieMan1") || ActorUtil.isClass(a,"ShotgunGuy1") || ActorUtil.isClass(a,"ChaingunGuy1")
        || ActorUtil.isClass(a,"PB_ZombieMan") || ActorUtil.isClass(a,"PB_ShotgunGuy") || ActorUtil.isClass(a,"PB_ChaingunGuy")
        || ActorUtil.isClass(a,"PB_ZombieScientist") || ActorUtil.isClass(a,"ZSpecOpsMachinegun"));
    }

    private void AddDropItem(Actor a, string dropitem)
    {
        Debug.LogVerbose("Adding a "..dropitem.." to "..a.GetTag());
        a.GiveInventory(dropitem,1);
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (a && a.GetLevelSpawnTime() <= 5 && isZombieman(a))
        {
            ChanceValue dropflash = DropItemConfig.GetFlashlightChance();
            ChanceValue dropflare = DropItemConfig.GetFlareChance();
            ChanceValue dropbattery = DropItemConfig.GetBatteryRechargeChance();
            ChanceValue dropbattery_exp = DropItemConfig.GetBatteryUpgradeChance();
            
            if (dropflash && dropflash.Roll())
                AddDropItem(a,"FlashlightDropper");
            if (dropflare && dropflare.Roll())
                AddDropItem(a,"FlareDropper");
            if (dropbattery && dropbattery.Roll())
                AddDropItem(a,"BatteryDropper");
            if (dropbattery_exp && dropbattery_exp.Roll())
                AddDropItem(a,"BatteryExpanderDropper");
        }
    }
}

//This item will drop a flashlight upon it's owner dying
class FlashlightDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("Flashlight");
        super.OwnerDied();
    }
}

class FlareDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("Flare");
        super.OwnerDied();
    }
}

class BatteryDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("FlashlightBatteryRecharge");
        super.OwnerDied();
    }
}

class BatteryExpanderDropper : FlashlightStartToken
{
    override void OwnerDied()
    {
        owner.A_DropItem("FlashlightBatteryUpgrade");
        super.OwnerDied();
    }
}
