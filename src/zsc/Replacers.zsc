class FlashlightReplacers : EventHandler
{

    Class<Actor> shotgunclass;
    Class<Actor> shellboxclass;
    Class<Actor> chaingunclass;
    Class<Actor> rocketammoclass;
    Class<Actor> clipboxclass;
    Class<Actor> rocketboxclass;
    Class<Actor> berserkclass;
    Class<Actor> backpackclass;
    Class<Actor> infraredclass;
    Class<Actor> soulsphereclass;
    Class<Actor> blursphereclass;
    Class<Actor> megasphereclass;

    void ReplaceThing(Actor original,Class<Actor> checkclass, String replacement, int chance)
    {
        int dice = random(0, 100);
    
        if (original && original.GetClass() is checkclass && dice <= chance)
        //if (original.CheckClass(checkclass,AAPTR_DEFAULT,true))
        //if (original)
        {
            let newthing = Actor.Spawn(replacement);
            
            newthing.A_SetAngle(original.angle, 0);
            newthing.A_SetPitch(original.pitch, SPF_INTERPOLATE);
            newthing.SetOrigin(original.pos, true);
            
            newthing.ChangeTID(original.tid);
            newthing.Special = original.Special;
            original.Destroy();
            
            Debug.LogVerbose("Replaced "..original.GetTag().." with a "..replacement.." (rolled a "..dice.." out of "..chance..")");
        }
    }
      
    override void OnRegister()
    {
        shotgunclass = "Shotgun";
        shellboxclass = "Shellbox";
        chaingunclass = "Chaingun";
        rocketammoclass = "RocketAmmo";
        clipboxclass = "ClipBox";
        rocketboxclass = "RocketBox";
        berserkclass = "Berserk";
        infraredclass = "Infrared";
        backpackclass = "Backpack";
        soulsphereclass = "Soulsphere";
        blursphereclass = "Blursphere";
        megasphereclass = "Megasphere";
    }
      
    override void CheckReplacement(ReplaceEvent e)
    {
    
        if (e.Replacee is shotgunclass && e.replacement)
            shotgunclass = e.replacement;
        else if (e.Replacee is shellboxclass && e.replacement)
            shellboxclass = e.replacement;
        else if (e.Replacee is chaingunclass && e.replacement)
            chaingunclass = e.replacement;
        else if (e.Replacee is rocketammoclass && e.replacement)
            rocketammoclass = e.replacement;
        else if (e.Replacee is clipboxclass && e.replacement)
            clipboxclass = e.replacement;
        else if (e.Replacee is rocketboxclass && e.replacement)
            rocketboxclass = e.replacement;
        else if (e.Replacee is berserkclass && e.replacement)
            berserkclass = e.replacement;
        else if (e.Replacee is infraredclass && e.replacement)
            infraredclass = e.replacement;
        else if (e.Replacee is backpackclass && e.replacement)
            backpackclass = e.replacement;
        else if (e.Replacee is soulsphereclass && e.replacement)
            soulsphereclass = e.replacement;
        else if (e.Replacee is blursphereclass && e.replacement)
            blursphereclass = e.replacement;
        else if (e.Replacee is megasphereclass && e.replacement)
            megasphereclass = e.replacement;
    
    }
    
    //TODO: Fix this garbage
    override void WorldThingSpawned(WorldEvent e)
    {
        Actor a = e.Thing;
        
        //We have a delicate situation here - This is called on EVERY actor spawn,
        //meaning we would replace things like dropped weapons (shotguns). This is bad,
        //because zombiemen will drop flashlights instead of shotguns
        //But we can't just do it once at the start either, because many mods (Brutal Doom, PB etc)
        //like to use "spawners" to create their objects, so we should wait a little bit (1 second)
        //and then discard anything spawned after the initial bit        
        if (a.GetLevelSpawnTime() <= 5)
        {
            DoReplacement(a);
            bool dropflash = CVar.FindCVar("flashlight_enemies_drop_flashlights").GetBool();
            bool dropflare = CVar.FindCVar("flashlight_enemies_drop_flares").GetBool();
            int dropflash_chance = CVar.FindCVar("flashlight_enemies_drop_flashlights_chance").GetInt();
            int dropflare_chance = CVar.FindCVar("flashlight_enemies_drop_flares_chance").GetInt();
            
            if (dropflash)
                DoAddDropItem(a,"FlashlightDropper",dropflash_chance);
            if (dropflare)
                DoAddDropItem(a,"FlareDropper",dropflare_chance);
        }
    }
    
    void DoAddDropItem(Actor a, string dropitem, int chance)
    {
        int dice = random(0, 100);
        
        if (a is "Zombieman" || a is "ShotgunGuy" || a is "ChaingunGuy" || a.Species == "Former_Human")
        {
            if (dice <= chance)
            {
                Debug.LogVerbose("Adding a "..dropitem.." to "..a.GetTag());
                a.GiveInventory(dropitem,1);
            }
        }
    }
    
    void DoReplacement(Actor a)
    {
        let spawn_flashlight = CVar.FindCVar("flashlight_spawn_flashlight").GetInt();
        let spawn_flashlight_chance = CVar.FindCVar("flashlight_spawn_flashlight_chance").GetInt();
        
        switch (spawn_flashlight)
        {
            case 1:
                ReplaceThing(a,shotgunclass,"Flashlight",spawn_flashlight_chance);
                break;
            case 2:
                ReplaceThing(a,shellboxclass,"Flashlight",spawn_flashlight_chance);
                break;
            case 3:
                ReplaceThing(a,chaingunclass,"Flashlight",spawn_flashlight_chance);
                break;
        }
        
        let spawn_flares = CVar.FindCVar("flashlight_spawn_flare").GetInt();
        let spawn_flares_chance = CVar.FindCVar("flashlight_spawn_flare_chance").GetInt();
        
        switch (spawn_flares)
        {
            case 1:
                ReplaceThing(a,rocketammoclass,"Flare",spawn_flares_chance);
                break;
        }


        let spawn_flare_boxes = CVar.FindCVar("flashlight_spawn_flare_box").GetInt();
        let spawn_flare_boxes_chance = CVar.FindCVar("flashlight_spawn_flare_box_chance").GetInt();
        
        switch (spawn_flare_boxes)
        {
            case 1:
                ReplaceThing(a,clipboxclass,"FlareBox",spawn_flare_boxes_chance);
                break;
            case 2:
                ReplaceThing(a,shellboxclass,"FlareBox",spawn_flare_boxes_chance);
                break;
            case 3:
                ReplaceThing(a,rocketboxclass,"FlareBox",spawn_flare_boxes_chance);
                break;
        }

        let spawn_headlamp = CVar.FindCVar("flashlight_spawn_headlamp").GetInt();
        let spawn_headlamp_chance = CVar.FindCVar("flashlight_spawn_headlamp_chance").GetInt();
        
        switch (spawn_headlamp)
        {
            /*
            case 1:
                ReplaceThing(a,berserkclass,"Flashlight",spawn_headlamp_chance);
                break;
            case 2:
                ReplaceThing(a,infraredclass,"Flashlight",spawn_headlamp_chance);
                break;
            case 3:
                ReplaceThing(a,backpackclass,"Flashlight",spawn_headlamp_chance);
                break;
            */
        }
        
        let spawn_battery_recharge = CVar.FindCVar("flashlight_spawn_battery_recharge").GetInt();
        let spawn_battery_recharge_chance = CVar.FindCVar("flashlight_spawn_battery_recharge_chance").GetInt();
        
        switch (spawn_battery_recharge)
        {
            case 1:
                ReplaceThing(a,backpackclass,"FlashlightBatteryRecharge",spawn_battery_recharge_chance);
                break;
            case 2:
                ReplaceThing(a,soulsphereclass,"FlashlightBatteryRecharge",spawn_battery_recharge_chance);
                break;
            case 3:
                ReplaceThing(a,blursphereclass,"FlashlightBatteryRecharge",spawn_battery_recharge_chance);
                break;
            case 4:
                ReplaceThing(a,megasphereclass,"FlashlightBatteryRecharge",spawn_battery_recharge_chance);
                break;
        }
        
        
        let spawn_battery_upgrade = CVar.FindCVar("flashlight_spawn_battery_upgrade").GetInt();
        let spawn_battery_upgrade_chance = CVar.FindCVar("flashlight_spawn_battery_upgrade_chance").GetInt();
        
        switch (spawn_battery_upgrade)
        {
            case 1:
                ReplaceThing(a,backpackclass,"FlashlightBatteryUpgrade",spawn_battery_upgrade_chance);
                break;
            case 2:
                ReplaceThing(a,soulsphereclass,"FlashlightBatteryUpgrade",spawn_battery_upgrade_chance);
                break;
            case 3:
                ReplaceThing(a,blursphereclass,"FlashlightBatteryUpgrade",spawn_battery_upgrade_chance);
                break;
            case 4:
                ReplaceThing(a,megasphereclass,"FlashlightBatteryUpgrade",spawn_battery_upgrade_chance);
                break;
        }
    }
}
