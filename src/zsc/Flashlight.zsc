class FlashlightBase : Weapon abstract
{
    FlashlightBeam beam;
    Battery battery;
    
    Default
    {
        Weapon.selectionorder 4000;
        Inventory.PickupSound "misc/gettool";
        Inventory.Amount 1;
        Inventory.MaxAmount 1;
        Scale 1.0;
        +Weapon.NOALERT;
        +DONTGIB;
        +Weapon.NOAUTOFIRE;
        +Weapon.NOAUTOAIM;
        +Inventory.ALWAYSPICKUP;
        +WEAPON.WIMPY_WEAPON;
        +WEAPON.NO_AUTO_SWITCH;
        +WEAPON.NOAUTOAIM;
        +WEAPON.NOAUTOFIRE;
        +COUNTITEM;
    }
    
    protected bool CanTurnOn()
    {
        if (beam.IsOn())
            return false;
        if (battery.ValueBelowThreshold())
            return false;
        if (battery.IsEmpty())
            return false;
        return true;
    }
    
    protected void TryTurnOn(Actor invoker, bool respect_autouse = false)
    {
        
        //bail out if we are being told to respect autouse but autouse isn't on
        if (respect_autouse && !FlashlightConfig.GetAutoUse())
            return;
        
        if (!beam.IsOn())
        {
            if (CanTurnOn())
            {
                owner.A_StartSound("flashlight/click",CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
                beam.SetReady(true);
                beam.Activate(invoker);
                battery.SetInUse(true);
            }
            else
            {
                battery.SetRed(5);
            }
        }
    }
    
    override void AttachToOwner(Actor other)
    {
        super.AttachToOwner(other);
        if (beam == null)
        {
            Debug.LogVerbose("Recreating beam");
        
            PlayerPawn player = PlayerPawn(other);
                    
            beam = FlashlightBeam(Actor.Spawn("FlashlightBeam"));
            beam.FollowPlayer(player);
        }
        
        if (battery == null)
        {
            Debug.LogVerbose("Recreating battery");
            battery = Battery(other.FindInventory("Battery"));
            if (!battery)
                battery = Battery(other.GiveInventoryType("Battery"));
        }
    }
    
    protected void TryTurnOff(Actor invoker)
    {
        if (beam.IsOn())
        {
            owner.A_StartSound("flashlight/click",CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
            beam.Deactivate(invoker);
            battery.SetInUse(false);
        }
    }
    
    protected void TryToggle(Actor invoker)
    {
        if (beam.IsOn())
            TryTurnOff(invoker);
        else
            TryTurnOn(invoker);
    }
    
    protected void BatteryControl(Actor invoker)
    {
        if (battery.IsEmpty())
            TryTurnOff(invoker);
    }
    
    /*
    static void UseFlare()
    {
        Inventory flare = owner.FindInventory("Flare",true);
        if (flare)
        {
            flare.Use(false);
            owner.TakeInventory("Flare",1);
        }
    }
    */
    
    
    override void OnDrop(Actor dropper)
    {
        beam.Deactivate(dropper);
    }
}


class Flashlight : FlashlightBase
{

    Default
    {
        Inventory.PickupMessage "$FLASHLIGHT_PICKUP";
        Tag "$FLASHLIGHT_FLASHLIGHT";
    }

	States 
	{ 
	    Spawn: 
		    HFFL A -1;
    		Loop;
	    Select:
            TNT1 A 1
            {
                A_Raise(999);
                A_SetCrosshair(99);
            }
            Loop;
        Ready:
            FLIT TRPNLJ 1;
            TNT1 A 0
            {
                invoker.TryTurnOn(invoker,true);
            }
        RealReady:
            TNT1 A 0
            {
                A_WeaponReady(WRF_ALLOWRELOAD);
                invoker.BatteryControl(invoker);
                if (invoker.beam.IsOn())
                    return ResolveState("ReadyOn");
                else
                    return ResolveState("ReadyOff");
            }
        ReadyOn:
            FLIT I 1 BRIGHT;
            Goto RealReady;
        ReadyOff:
            FLIT I 1;
            Goto RealReady;
        Deselect:
            TNT1 A 0
            {
                invoker.TryTurnOff(invoker);
            }
            FLIT IJLNPRT 1;
            TNT1 A 1
            {
                A_Lower(999);
                A_SetCrosshair(0);
            }
            Loop;
        Fire: 
            FLIT I 0
            {
                invoker.TryToggle(invoker);
            }
            Goto RealReady;
        AltFire: 
            FLIT I 0
            {
                //invoker.UseFlare();
                ACS_NamedExecute("UseFlare",0);
            }
            Goto RealReady;
        Reload:
            FLIT I 0 A_JumpIf(invoker.battery.CanUseRecharger(),"RefillBattery");
            Goto RealReady;
        RefillBattery:
            TNT1 A 0
            {   
                invoker.TryTurnOff(invoker);
            }
            FLIT IJLNPRT 1;
            FLIT T 15;
            FLIT TRPNLJ 1;
            TNT1 A 0
            {
                invoker.battery.UseRecharger();
                invoker.TryTurnOn(invoker,true);
            }
            Goto RealReady;
	}
}
