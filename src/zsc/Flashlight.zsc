class FlashlightBase : Weapon abstract
{
    FlashlightBeam beam;
    Battery battery;
    int revealRadius;
    
    Default
    {
        Weapon.selectionorder 4000;
        Inventory.PickupSound "misc/gettool";
        Inventory.Amount 1;
        Inventory.MaxAmount 1;
        Scale 1.0;
        +Weapon.NOALERT;
        +DONTGIB;
        +Weapon.NOAUTOFIRE;
        +Weapon.NOAUTOAIM;
        +Inventory.ALWAYSPICKUP;
        +WEAPON.WIMPY_WEAPON;
        +WEAPON.NO_AUTO_SWITCH;
        -COUNTITEM;
    }
    
    protected void RecreateBeam(Actor attachto)
    {
        PlayerPawn player = PlayerPawn(attachto);
        
        if (player)
        {
            Debug.LogVerbose("Recreating beam");
            beam = FlashlightBeam(Actor.Spawn("FlashlightBeam"));
            beam.FollowPlayer(player);
        }
    }
    
    protected void DestroyBeam()
    {
        beam.Deactivate(owner);
        beam.Destroy();
    }
    
    protected void RecreateBattery(Actor attachto)
    {
        Debug.LogVerbose("Recreating battery");
        battery = Battery(attachto.FindInventory("Battery"));
        if (!battery)
            battery = Battery(attachto.GiveInventoryType("Battery"));
    }
    
    override void Travelled()
    {
        RecreateBeam(owner);
        super.Travelled();
    }
    
    override void AttachToOwner(Actor other)
    {
        RecreateBeam(other);
        RecreateBattery(other);
        super.AttachToOwner(other);
    }
    
    override void DetachFromOwner()
    {
        DestroyBeam();
        super.DetachFromOwner();
    }
    
    protected bool CanTurnOn()
    {
        if (beam.IsOn())
            return false;
        if (battery.ValueBelowThreshold())
            return false;
        if (battery.IsEmpty())
            return false;
        return true;
    }
    
    protected void TryTurnOn(Actor invoker, bool respect_autouse = false)
    {
        if (respect_autouse && !FlashlightConfig.GetAutoUse())
            return;
        
        if (!beam.IsOn())
        {
            if (CanTurnOn())
            {
                owner.A_StartSound("flashlight/click",CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
                beam.TurnOn(invoker);
                battery.SetInUse(true);
            }
            else
            {
                battery.SetRed(5);
            }
        }
    }
    
    protected void TryTurnOff(Actor invoker)
    {
        if (beam.IsOn())
        {
            owner.A_StartSound("flashlight/click",CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
            beam.TurnOff(invoker);
            battery.SetInUse(false);
        }
    }
    
    protected void TryToggle(Actor invoker)
    {
        if (beam.IsOn())
            TryTurnOff(invoker);
        else
            TryTurnOn(invoker);
    }
    
    /*
    static void UseFlare()
    {
        Inventory flare = owner.FindInventory("Flare",true);
        if (flare)
        {
            flare.Use(false);
            owner.TakeInventory("Flare",1);
        }
    }
    */
    
    void RevealStealth()
    {
        if (flashlight_flashlight_reveal_stealth)
            A_RadiusGive("StealthRemover",flashlight_flashlight_reveal_radius,RGF_PLAYERS|RGF_MONSTERS|RGF_NOSIGHT,999);
        if (beam.IsOn())
            owner.GiveInventory("StealthRemover",1);
    }
    
    override void DoEffect()
    {
        if (battery.IsEmpty())
            TryTurnOff(owner);
    }
}

class Flashlight : FlashlightBase
{

    Default
    {
        Inventory.PickupMessage "$FLASHLIGHT_PICKUP";
        Tag "$FLASHLIGHT_FLASHLIGHT";
    }

	States 
	{ 
	    Spawn: 
		    HFFL A -1;
    		Loop;
	    Select:
            TNT1 A 1
            {
                A_Raise(999);
                A_SetCrosshair(99);
            }
            Loop;
        Ready:
            FLIT TRPNLJ 1;
            TNT1 A 0
            {
                invoker.TryTurnOn(invoker,true);
            }
        RealReady:
            TNT1 A 0
            {
                A_WeaponReady(WRF_ALLOWRELOAD);               
                if (invoker.beam.IsOn())
                    return ResolveState("ReadyOn");
                else
                    return ResolveState("ReadyOff");
            }
        ReadyOn:
            FLIT I 1 BRIGHT
            {
                invoker.RevealStealth();
            }
            Goto RealReady;
        ReadyOff:
            FLIT I 1;
            Goto RealReady;
        Deselect:
            TNT1 A 0
            {
                invoker.TryTurnOff(invoker);
            }
            FLIT IJLNPRT 1;
            TNT1 A 1
            {
                A_Lower(999);
                A_SetCrosshair(0);
            }
            Loop;
        Fire: 
            TNT1 A 0
            {
                invoker.TryToggle(invoker);
            }
            Goto RealReady;
        AltFire: 
            TNT1 A 0
            {
                //invoker.UseFlare();
                ACS_NamedExecute("UseFlare",0);
            }
            Goto RealReady;
        Reload:
            TNT1 A 0 A_JumpIf(invoker.battery.CanUseRecharger(),"RefillBattery");
            Goto RealReady;
        RefillBattery:
            TNT1 A 0
            {   
                invoker.TryTurnOff(invoker);
            }
            FLIT IJLNPRT 1;
            FLIT T 15;
            FLIT TRPNLJ 1;
            TNT1 A 0
            {
                invoker.battery.UseRecharger();
                invoker.TryTurnOn(invoker,true);
            }
            Goto RealReady;
	}
}

class FlameWand : FlashlightBase
{

    Default
    {
        Inventory.PickupMessage "$FLASHLIGHT_PICKUP";
        Tag "$FLASHLIGHT_FLASHLIGHT";
    }

	States 
	{ 
	    Spawn: 
		    WEMB A -1;
    		Loop;
	    Select:
            TNT1 A 1
            {
                A_Raise(999);
                A_SetCrosshair(99);
            }
            Loop;
        Ready:
            //FLIT TRPNLJ 1;
            WEMB BBCCD 1;
            TNT1 A 0
            {
                invoker.TryTurnOn(invoker,true);
            }
        RealReady:
            TNT1 A 0
            {
                A_WeaponReady(WRF_ALLOWRELOAD);               
                if (invoker.beam.IsOn())
                    return ResolveState("ReadyOn");
                else
                    return ResolveState("ReadyOff");
            }
        ReadyOn:
            //FLIT I 1 BRIGHT
            WEMB G 1 BRIGHT
            {
                invoker.RevealStealth();
            }
            Goto RealReady;
        ReadyOff:
            //FLIT I 1;
            WEMB D 1;
            Goto RealReady;
        Deselect:
            TNT1 A 0
            {
                invoker.TryTurnOff(invoker);
            }
            //FLIT IJLNPRT 1;
            WEMB DDCCB 1;
            TNT1 A 1
            {
                A_Lower(999);
                A_SetCrosshair(0);
            }
            Loop;
        Fire: 
            TNT1 A 0
            {
                invoker.TryToggle(invoker);
            }
            Goto RealReady;
        AltFire: 
            TNT1 A 0
            {
                //invoker.UseFlare();
                ACS_NamedExecute("UseFlare",0);
            }
            Goto RealReady;
        Reload:
            TNT1 A 0 A_JumpIf(invoker.battery.CanUseRecharger(),"RefillBattery");
            Goto RealReady;
        RefillBattery:
            TNT1 A 0
            {   
                invoker.TryTurnOff(invoker);
            }
            WEMB DDCCB 1;
            WEMB B 15;
            WEMB BBCCD 1;
            //FLIT IJLNPRT 1;
            //FLIT T 15;
            //FLIT TRPNLJ 1;
            TNT1 A 0
            {
                invoker.battery.UseRecharger();
                invoker.TryTurnOn(invoker,true);
            }
            Goto RealReady;
	}
}
