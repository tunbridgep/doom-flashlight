class Flashlight : Weapon
{

    FlashlightBeam beam;
    Battery battery;
    int revealRadius;
    SpriteID skinSprite;
    SpriteID skinSpriteOff1;
    SpriteID skinSpriteOff2;
    SpriteID skinSpriteOff3;
    String enableSound;
    String pickupSound;
    
    Default
    {
        Weapon.selectionorder 4000;
        Inventory.PickupSound "misc/gettool";
        Inventory.Amount 1;
        Inventory.MaxAmount 1;
        Inventory.PickupMessage "$FLASHLIGHT_PICKUP";
        Tag "$FLASHLIGHT_FLASHLIGHT";
        Scale 1.0;
        +Weapon.NOALERT;
        +DONTGIB;
        +Weapon.NOAUTOFIRE;
        +Weapon.NOAUTOAIM;
        +Inventory.ALWAYSPICKUP;
        +WEAPON.WIMPY_WEAPON;
        +WEAPON.NO_AUTO_SWITCH;
        -COUNTITEM;
    }
    
    override void postBeginPlay()
    {
        super.postbeginplay();
        SetSkinSprite();
    }
    
    private void SetSkinSprite()
    {
        switch (flashlight_skin)
        {
            case 0:
                skinSprite = getspriteindex("FLIT");
                skinSpriteOff1 = getspriteindex("FLIT");
                skinSpriteOff2 = getspriteindex("FLIT");
                skinSpriteOff3 = getspriteindex("FLIT");
                sprite = getspriteindex("FLPK");
                enableSound = "flashlight/click";
                break;
            case 1:
                skinSprite = getspriteindex("FLBL");
                skinSpriteOff1 = getspriteindex("FLBL");
                skinSpriteOff2 = getspriteindex("FLBL");
                skinSpriteOff3 = getspriteindex("FLBL");
                sprite = getspriteindex("FLPK");
                enableSound = "flashlight/click";
                break;
            case 2:
                skinSprite = getspriteindex("WNDD");
                skinSpriteOff1 = getspriteindex("WNDA");
                skinSpriteOff2 = getspriteindex("WNDB");
                skinSpriteOff3 = getspriteindex("WNDC");
                sprite = getspriteindex("WNDP");
                enableSound = "wand/click";
                break;
        }
        
        
        pickupSound = "misc/gettool"; //misc/ammo_pkup??
        
    }
    
    //Thanks EriWeapons for this!
    action void X_SetSkinFrame(SpriteID sprite, int layer = PSP_WEAPON)
	{
		if(self.player) {
			PSprite psp = self.player.GetPSprite(layer);
			if(psp && psp.CurState != null) {
				psp.Sprite = sprite;
				//psp.frame = frame;
			}
		}
	}
    
    protected void RecreateBeam(Actor attachto)
    {
        PlayerPawn player = PlayerPawn(attachto);
        
        if (player)
        {
            Debug.LogVerbose("Recreating beam");
            beam = FlashlightBeam(Actor.Spawn("FlashlightBeam"));
            beam.FollowPlayer(player);
        }
    }
    
    protected void DestroyBeam()
    {
        beam.Deactivate(owner);
        beam.Destroy();
    }
    
    protected void RecreateBattery(Actor attachto)
    {
        Debug.LogVerbose("Recreating battery");
        battery = Battery(attachto.FindInventory("Battery"));
        if (!battery)
            battery = Battery(attachto.GiveInventoryType("Battery"));
    }
    
    override void Travelled()
    {
        RecreateBeam(owner);
        super.Travelled();
    }
    
    override void AttachToOwner(Actor other)
    {
        RecreateBeam(other);
        RecreateBattery(other);
        super.AttachToOwner(other);
    }
    
    override void DetachFromOwner()
    {
        DestroyBeam();
        super.DetachFromOwner();
    }
    
    protected bool CanTurnOn()
    {
        if (beam.IsOn())
            return false;
        if (battery.ValueBelowThreshold())
            return false;
        if (battery.IsEmpty())
            return false;
        return true;
    }
    
    protected void TryTurnOn(Actor invoker, bool respect_autouse = false)
    {
        if (respect_autouse && !FlashlightConfig.GetAutoUse())
            return;
        
        if (!beam.IsOn())
        {
            if (CanTurnOn())
            {
                owner.A_StartSound(enableSound,CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
                beam.TurnOn(invoker);
                battery.SetInUse(true);
            }
            else
            {
                battery.SetRed(5);
            }
        }
    }
    
    protected void TryTurnOff(Actor invoker)
    {
        if (beam.IsOn())
        {
            owner.A_StartSound(enableSound,CHAN_AUTO,CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL|CHANF_OVERLAP,1.0,ATTN_NONE);
            beam.TurnOff(invoker);
            battery.SetInUse(false);
        }
    }
    
    protected void TryToggle(Actor invoker)
    {
        if (beam.IsOn())
            TryTurnOff(invoker);
        else
            TryTurnOn(invoker);
    }
    
    /*
    static void UseFlare()
    {
        Inventory flare = owner.FindInventory("Flare",true);
        if (flare)
        {
            flare.Use(false);
            owner.TakeInventory("Flare",1);
        }
    }
    */
    
    void RevealStealth()
    {
        if (flashlight_flashlight_reveal_stealth)
            owner.A_RadiusGive("StealthRemover",flashlight_flashlight_reveal_radius,RGF_PLAYERS|RGF_MONSTERS|RGF_NOSIGHT,999);
            owner.GiveInventory("StealthRemover",1);
    }
    
    override void DoEffect()
    {
        if (battery.IsEmpty())
            TryTurnOff(owner);
    }

	States 
	{
        //Dummy state is needed to load our sprites and allow us to use skins
        Dummy:
            FLPK A 0;
            FLIT A 0;
            FLBL A 0;
            WNDP A 0;
            WNDA A 0;
            WNDB A 0;
            WNDC A 0;
            WNDD A 0;
	    Spawn: 
		    #### A -1;
    		Loop;
	    Select:
            TNT1 A 1
            {
                A_Raise(999);
                A_SetCrosshair(99);
                invoker.SetSkinSprite();
            }
            Loop;
        Ready:
            TNT1 A 1; //Need a blank frame at the start of the Ready sequence or gzdoom thinks we don't have a valid sprite and won't let us select the weapon
            
            TNT1 A 1 { A_WeaponOffset(67,83); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT T
            //TNT1 A 1 { A_WeaponOffset(62,77); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT S
            TNT1 A 1 { A_WeaponOffset(57,70); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT R
            //TNT1 A 1 { A_WeaponOffset(49,61); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT Q
            TNT1 A 1 { A_WeaponOffset(41,54); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT P
            //TNT1 A 1 { A_WeaponOffset(37,52); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT O
            TNT1 A 1 { A_WeaponOffset(31,51); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT N
            //TNT1 A 1 { A_WeaponOffset(25,49); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT M
            TNT1 A 1 { A_WeaponOffset(22,47); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT L
            //TNT1 A 1 { A_WeaponOffset(11,44); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT K
            TNT1 A 1 { A_WeaponOffset(3,32); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT J
            
            TNT1 A 0
            {
                A_WeaponOffset(3,32);
                invoker.TryTurnOn(invoker,true);
            }
        RealReady:
            TNT1 A 0
            {
                A_WeaponReady(WRF_ALLOWRELOAD);               
                if (invoker.beam.IsOn())
                    return ResolveState("ReadyOn");
                else
                    return ResolveState("ReadyOff");
            }
        ReadyOn:
            TNT1 A 1 BRIGHT
            {
                X_SetSkinFrame(invoker.skinSprite);
                invoker.RevealStealth();
            }
            Goto RealReady;
        ReadyOff:
            TNT1 A 1 X_SetSkinFrame(invoker.skinSpriteOff3);
            Goto RealReady;
        Deselect:
            TNT1 A 0
            {
                invoker.TryTurnOff(invoker);
            }
            TNT1 A 1 { A_WeaponOffset(3,32); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT J
            //TNT1 A 1 { A_WeaponOffset(11,44); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT K
            TNT1 A 1 { A_WeaponOffset(22,47); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT L
            //TNT1 A 1 { A_WeaponOffset(25,49); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT M
            TNT1 A 1 { A_WeaponOffset(31,51); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT N
            //TNT1 A 1 { A_WeaponOffset(37,52); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT O
            TNT1 A 1 { A_WeaponOffset(41,54); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT P
            //TNT1 A 1 { A_WeaponOffset(49,61); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT Q
            TNT1 A 1 { A_WeaponOffset(57,70); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT R
            //TNT1 A 1 { A_WeaponOffset(62,77); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT S
            TNT1 A 1 { A_WeaponOffset(67,83); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT T
            TNT1 A 1
            {
                A_WeaponOffset(0,0);
                A_Lower(999);
                A_SetCrosshair(0);
            }
            Loop;
        Fire: 
            TNT1 A 0
            {
                invoker.TryToggle(invoker);
            }
            Goto RealReady;
        AltFire: 
            TNT1 A 0
            {
                //invoker.UseFlare();
                ACS_NamedExecute("UseFlare",0);
            }
            Goto RealReady;
        Reload:
            TNT1 A 0 A_JumpIf(invoker.battery.CanUseRecharger(),"RefillBattery");
            Goto RealReady;
        RefillBattery:
            TNT1 A 0
            {   
                invoker.TryTurnOff(invoker);
            }
            
            //Deselect
            TNT1 A 1 { A_WeaponOffset(3,32); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT J
            //TNT1 A 1 { A_WeaponOffset(11,44); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT K
            TNT1 A 1 { A_WeaponOffset(22,47); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT L
            //TNT1 A 1 { A_WeaponOffset(25,49); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT M
            TNT1 A 1 { A_WeaponOffset(31,51); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT N
            //TNT1 A 1 { A_WeaponOffset(37,52); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT O
            TNT1 A 1 { A_WeaponOffset(41,54); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT P
            //TNT1 A 1 { A_WeaponOffset(49,61); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT Q
            TNT1 A 1 { A_WeaponOffset(57,70); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT R
            //TNT1 A 1 { A_WeaponOffset(62,77); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT S
            TNT1 A 1 { A_WeaponOffset(67,83); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT T
            
            //Hold
            TNT1 A 15 { A_WeaponOffset(67,83); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT T
            
            //Reselect
            TNT1 A 1 { A_WeaponOffset(67,83); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT T
            //TNT1 A 1 { A_WeaponOffset(62,77); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT S
            TNT1 A 1 { A_WeaponOffset(57,70); X_SetSkinFrame(invoker.skinSpriteOff1); } //FLIT R
            //TNT1 A 1 { A_WeaponOffset(49,61); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT Q
            TNT1 A 1 { A_WeaponOffset(41,54); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT P
            //TNT1 A 1 { A_WeaponOffset(37,52); X_SetSkinFrame(invoker.skinSpriteOff2); } //FLIT O
            TNT1 A 1 { A_WeaponOffset(31,51); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT N
            //TNT1 A 1 { A_WeaponOffset(25,49); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT M
            TNT1 A 1 { A_WeaponOffset(22,47); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT L
            //TNT1 A 1 { A_WeaponOffset(11,44); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT K
            TNT1 A 1 { A_WeaponOffset(3,32); X_SetSkinFrame(invoker.skinSpriteOff3); } //FLIT J
            
            TNT1 A 0
            {
                A_WeaponOffset(3,32);
                invoker.battery.UseRecharger();
                invoker.TryTurnOn(invoker,true);
            }
            Goto RealReady;
	}
}
