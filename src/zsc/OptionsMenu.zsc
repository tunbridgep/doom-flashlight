//===========================================================================
//
// Adapted from Nash's Tilt++ Menu, hut with significant changes
// I don't normally like to use other people's code without
// explicitly asking for permission, but the Zdoom wiki
// has virtually no documentation on the subject
//
//===========================================================================

mixin class Conditional
{
    int condition_min;
    int condition_max;
    String disabled_text;
 	Cvar conditional;
    
    protected void DrawDisabledText(String text, int y, int color, Font font)
    {
        Screen.DrawText (font, color,
				(Screen.GetWidth() - font.StringWidth (text) * CleanXfac_1) / 2,
				y,
				StringTable.Localize(text),
				DTA_CleanNoMove_1, true);
    }

    protected bool CheckCondition()
    {
        if (conditional)
        {
            int val = conditional.GetInt();
            bool conditional_min = val >= condition_min;
            bool conditional_max = condition_max <= 0 ? true : val <= condition_max;
       	    return conditional_min && conditional_max;
       	}
       	return true;
    }
    
    override bool Selectable()
	{
    	return CheckCondition();
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
	    if (CheckCondition())
	    {
	        return super.Draw(desc,y,indent,selected);
		}
		else
		{
		    String text = disabled_text == "" ? "$DISABLED" : disabled_text;
            DrawDisabledText(text,y,OptionMenuSettings.mFontColorValue,Menu.OptionFont());
            return indent;
		}
	}
}

class OptionMenuItemFlashlightDynamicText : OptionMenuItemStaticText
{

    Cvar c;
    String labels[7];

    OptionMenuItemFlashlightDynamicText Init(int color, CVar condition, String l0, String l1, String l2, String l3 = "", String l4 = "", String l5 = "", String l6 = "")
    {
        c = condition;
        labels[0] = l0;
        labels[1] = l1;
        labels[2] = l2;
        labels[3] = l3;
        labels[4] = l4;
        labels[5] = l5;
        labels[6] = l6;
    
        Super.Init(l0,color);
        return self;
    }
    
    private String calculateText()
    {
        if (c)
        {
            int val = c.GetInt();
            for (int i = 0;i < labels.size();i++)
            {
                if (val == i)
                    return labels[i];
            }
        }
        return labels[0];
    }
    
    override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
	    mLabel = calculateText();
		return Super.Draw(desc,y,indent,selected);
	}
}

class OptionMenuItemFlashlightOption : OptionMenuItemOption
{
    mixin Conditional;

	OptionMenuItemFlashlightOption Init(String label, Name command, Name values, CVar graycheck = null, int center = 0, Cvar conditionalcmd = null, String disabledtext = "", int conditionmin = 0, int conditionmax = 0)
	{
  	    conditional = conditionalcmd;
	    condition_min = conditionmin;
	    condition_max = conditionmax;
	    disabled_text = disabledtext;
	
		Super.Init(label, command, values, graycheck, center);
		return self;
	}
}

class OptionMenuItemFlashlightSlider : OptionMenuItemSlider
{ 
	mixin Conditional;
	
	OptionMenuItemFlashlightSlider Init(String label, Name command, double min, double max, double step, int showval = 1, Cvar conditionalcmd = null, String disabledtext = "", int conditionmin = 0, int conditionmax = 0)
	{
	    conditional = conditionalcmd;
	    condition_min = conditionmin;
	    condition_max = conditionmax;
	    disabled_text = disabledtext;
	
		Super.Init(label, command, min, max, step, showval);
		return self;
	}
}

class FlashlightMenu : OptionMenu
{ 
    override void Drawer ()
	{
		Super.Drawer();
		
        /*

		String tt;

		if (mDesc.mSelectedItem > 0)
		{
			if (mDesc.mItems[mDesc.mSelectedItem] is "OptionMenuItemFlashlightOption")
			{
				tt = StringTable.Localize(OptionMenuItemFlashlightOption(mDesc.mItems[mDesc.mSelectedItem]).mTooltip);
			}

			if (mDesc.mItems[mDesc.mSelectedItem] is "OptionMenuItemFlashlightSlider")
			{
				//tt = StringTable.Localize(OptionMenuItemFlashlightSlider(mDesc.mItems[mDesc.mSelectedItem]).mTooltip);
			}
		}

		if (tt.Length() > 0)
		{
			Screen.DrawText (OptionFont(), OptionMenuSettings.mFontColorValue,
				(Screen.GetWidth() - OptionFont().StringWidth (tt) * CleanXfac_1) / 2,
				BigFont.GetHeight() * CleanYfac_1 * 2.5,
				tt,
				DTA_CleanNoMove_1, true);
		}
		*/
	}
}
