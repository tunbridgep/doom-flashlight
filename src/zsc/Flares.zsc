class Flare : CustomInventory
{
    Default
    {
        Radius 12;
        Height 18;
        //+INVENTORY.INVBAR;
        +INVENTORY.HUBPOWER;
        +INVENTORY.PERSISTENTPOWER;
        +DONTGIB;
        Inventory.MaxAmount 999;
        Inventory.InterHubAmount 999;
        Inventory.Icon "FLARINV";
        Inventory.PickupMessage "You picked up a flare.";
    }
    
    //this would update in real-time, but the game is a bit weird when it comes to 
    //override void Tick()
    override void BeginPlay()
    {
        self.bINVBAR = FlareConfig.GetAppearInInventory();
    }
       
    override bool CanPickup(Actor toucher)
    {
        bool allow = flashlight_flare_max_amount <= 0 || toucher.CountInv("Flare") < flashlight_flare_max_amount;
        return allow && super.CanPickup(toucher);
    }
    
    States
    {
        Spawn:
            FLZR D -1;
            Stop;
        Use:
            TNT1 A 1 A_FireProjectile("ActiveFlareProjectile");
            Stop;
    }
}

class FlareBox : CustomInventory
{
    Default
    {
        Radius 28;
        Height 16;
        Inventory.PickupMessage "You picked up a box of flares.";
    }
    States
    {
        Spawn:
            FLZR C -1;
            Stop;
        Pickup:
            TNT1 A 1 A_GiveInventory ("Flare", 5);
            Stop;
    }
}

class FlareLight : PointLight
{
    Actor toFollow;
    Vector3 offset;
    int Intensity;
    
    override void BeginPlay()
    {
        Color color = FlareConfig.GetColor();
        args[LIGHT_RED] = color.r;
        args[LIGHT_GREEN] = color.g;
        args[LIGHT_BLUE] = color.b;
        SetIntensity(242);
        bATTENUATE = true;
    }
    
    protected void SetIntensity(int amount)
    {
        args[LIGHT_INTENSITY] = amount;
        Intensity = amount;
    }
    
    override void Tick()
    {
        ActorUtil.MoveToActor(self,toFollow,offset);
        int new_intensity = random(220,260);
        SetIntensity(new_intensity);
        Super.Tick();
    }
}

class FlareBase : Actor abstract
{
    FlareLight pointLight;
    
    protected void GenerateDynamicLight()
    {
        if (!pointLight)
        {
            Debug.LogVerbose("Creating dynamic light for flare");
            pointLight = FlareLight(Actor.Spawn("FlareLight"));
            if (pointLight)
                pointLight.toFollow = self;
        }
    }
    
    protected void RemoveDynamicLight()
    {
        if (pointLight)
            pointLight.Destroy();
    }

    Default
    {
        Radius 22;
        Height 11;
    }
    States
    {
        Spawn:
            FLZR A 0;
            FLZR A 1
            {
                GenerateDynamicLight();
                A_PlaySoundEx("Flare/Loop", "SoundSlot7", 1, -1);
            }
            Goto PostSpawn;
        PostSpawn:    
            FLZR A 1 Bright;
        Flicker:
            FLZR AB random(1,4) Bright;
            Goto Flicker;
    }
}

class ActiveFlare : FlareBase
{
    int burntime;
    bool burn_forever;
    
    override void BeginPlay()
    {
        burntime = FlareConfig.GetBurnTime();
        burn_forever = flashlight_flare_burn_forever;
    }
    
    override void Tick()
    {
        burntime--;
        if (burntime < 0 && !burn_forever)
        {
            SetStateLabel("BurnedOut");
            bFORCEXYBILLBOARD = true;
            RemoveDynamicLight();
            A_StopSound(7);
        }
        else if (pointLight && flashlight_flare_reveal_stealth)
        {
            A_RadiusGive("StealthRemover",pointLight.Intensity * 1.5,RGF_PLAYERS|RGF_MONSTERS|RGF_NOSIGHT,999);
        }
        else
            Debug.LogError("Flare was not able to establish pointlight");
        Super.Tick();
    }
    
    States
    {
        BurnedOut:
            FLZR E -1;
            Stop;
    }
}
class ActiveFlareProjectile : FlareBase
{
   
    private void GenerateStationaryFlare()
    {
        let flare = ActiveFlare(Actor.Spawn("ActiveFlare",pos));
        if (flare && pointlight)
        {
            pointLight.toFollow = flare;
            flare.pointLight = pointLight;
        }
        self.Destroy();
    }

    Default
    {
        BounceType "Doom";
        Projectile;
        Speed 20;
        +MISSILE;
        -NOGRAVITY;
        -BLOODSPLATTER;
        -EXTREMEDEATH;
        +EXPLODEONWATER;
        +SKYEXPLODE;
        +BOUNCEONFLOORS;
        +BOUNCEONWALLS;
        +BOUNCEONCEILINGS;
        -NOTELEPORT;
        +THRUSPECIES;
        +THRUGHOST;
        Gravity 1.0;
        BounceFactor 0.25;
        WallBounceFactor 0.15;
    }
    
    States
    {
        Spawn:
            FLZR A 0;
            FLZR A 1 Bright
            {
                GenerateDynamicLight();
                A_PlaySound("Flare/Light");
            }
            Goto PostSpawn;
        Death:
            FLZR A 1 GenerateStationaryFlare();
            Stop;

    }
}
