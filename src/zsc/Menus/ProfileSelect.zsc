class OptionMenuItemFlashlightApplyProfile : OptionMenuItemStaticText
{
    enum Profile
	{
	    DISABLED = 0,
	    NIGHT_MODE = 1,
	    FLARES_ONLY_MODE = 2,
		DARKER_DARKNESS = 3,
		HELL_MODE = 4,
		DOOM_3_STYLE = 5,
		AMBUSH_MODE = 6,
		DRAIN_MODE = 7,
		VANILLA_MODE = 8,
		DRAIN_MODE_NIGHT = 9,
		TWILIGHT = 10
	};

    OptionMenuItemFlashlightApplyProfile Init(String text, int color = -1)
    {  
        Super.Init(text,color);
        return self;
    }
    
    override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
    {
        if (mLabel.Length() > 0)
		{
            indent += Menu.OptionFont().StringWidth(mLabel) * CleanXfac_1;
		}
    
        return drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : mColor) + 35;
    }
    
    override bool Selectable()
	{
    	return true;
	}
	
	override bool Activate()
	{
		Menu.MenuSound("menu/choose");
		SelectProfile(CVar.GetCvar("flashlight_profile_temp").GetInt());
		return true;
    }
    
    void SelectProfile(Profile p)
    {
        //This is our display variable for our current profile
        CVar.GetCvar("flashlight_profile").SetInt(p);
        
        ResetConfig.ResetLimitedDefaults();
		
		//Don't ever replace the sky if we are in vanilla mode or the mod is disabled,
		//to keep things as vanilla as possible
		if (p == DISABLED || p == VANILLA_MODE)
		{
			CVar.GetCvar("flashlight_replace_sky").SetBool(false);
		}
                
        if (p != DISABLED && p != FLARES_ONLY_MODE && p != DRAIN_MODE_NIGHT && p != DRAIN_MODE && p != VANILLA_MODE && p != TWILIGHT)
        {
            //common stuff
            CVar.GetCvar("flashlight_spawn_battery_upgrade").SetInt(1);
        }
               
        if (p == NIGHT_MODE || p == AMBUSH_MODE || p == DRAIN_MODE_NIGHT) //map is dark, start with flashlight
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(3);
            CVar.GetCvar("flashlight_darken_divide_amount").ResetToDefault();
            CVar.GetCvar("flashlight_starting_item").SetInt(1);
            CVar.GetCvar("flashlight_enemies_drop_flares").SetBool(true);
            if (p == AMBUSH_MODE || p == DRAIN_MODE_NIGHT)
			{
                CVar.GetCvar("flashlight_stealth_monster_mode").SetInt(3);
				CVar.GetCvar("flashlight_stealth_player_enabled").SetBool(true);
			}
            if (p == DRAIN_MODE_NIGHT)
            {
                CVar.GetCvar("flashlight_enemies_drop_battery").SetBool(true);
                CVar.GetCvar("flashlight_stealth_monster_chance").SetInt(100);
                CVar.GetCvar("flashlight_battery_min_threshold").SetInt(0);
                CVar.GetCvar("flashlight_battery_use_per_tic").SetInt(1);
                CVar.GetCvar("flashlight_battery_charge_per_tic").SetInt(0);
                CVar.GetCvar("flashlight_spawn_battery_upgrade_chance").SetBool(true);
            }
        }
        else if (p == VANILLA_MODE) //Very simply profile. Nothing is changed, but enemies drop the flashlight and flares
        {
            CVar.GetCvar("flashlight_enemies_drop_flares").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_flashlights").SetBool(true);
        }
        else if (p == DRAIN_MODE) //dark areas are dark, flashlight doesn't recharge, batteries are common, no flares
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(4);
            CVar.GetCvar("flashlight_starting_item").SetInt(1);
            CVar.GetCvar("flashlight_enemies_drop_battery").SetBool(true);
            
            //Stealth Monster settings
            CVar.GetCvar("flashlight_stealth_monster_mode").SetInt(3);
			CVar.GetCvar("flashlight_stealth_player_enabled").SetBool(true);
            CVar.GetCvar("flashlight_stealth_monster_chance").SetInt(100);
            
            //battery settings
            CVar.GetCvar("flashlight_battery_min_threshold").SetInt(0);
            CVar.GetCvar("flashlight_battery_use_per_tic").SetInt(1);
            CVar.GetCvar("flashlight_battery_charge_per_tic").SetInt(0);
            CVar.GetCvar("flashlight_battery_max").SetInt(2100);
            CVar.GetCvar("flashlight_spawn_battery_recharge").SetInt(1);
        }
        else if (p == DOOM_3_STYLE) //map is dark, start with flashlight, unlimited battery
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(3);
            CVar.GetCvar("flashlight_darken_divide_amount").ResetToDefault();
            CVar.GetCvar("flashlight_starting_item").SetInt(1);
            CVar.GetCvar("flashlight_spawn_battery_upgrade").ResetToDefault();
            CVar.GetCvar("flashlight_spawn_battery_recharge").ResetToDefault();
            CVar.GetCvar("flashlight_battery_mode").SetInt(0);
        }
        else if (p == FLARES_ONLY_MODE) //map is dark, start with flares, flashlight completely disabled
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(3);
            CVar.GetCvar("flashlight_darken_divide_amount").ResetToDefault();
            CVar.GetCvar("flashlight_starting_flares").SetInt(10);
            CVar.GetCvar("flashlight_spawn_flare_box").SetBool(true);
            CVar.GetCvar("flashlight_spawn_flare").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_flares").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_flares_chance").SetInt(15);
            CVar.GetCvar("flashlight_stealth_monster_mode").SetInt(3);
            CVar.GetCvar("flashlight_stealth_monster_chance").SetInt(100);
			CVar.GetCvar("flashlight_stealth_player_enabled").SetBool(true);
            CVar.GetCvar("flashlight_flare_recharge_enabled").SetBool(true);
        }
        else if (p == DARKER_DARKNESS) //Darken dark areas, start with flares, enemies drop items, optional stealth for basic monsters
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(2);
            CVar.GetCvar("flashlight_starting_flares").SetInt(5);
            CVar.GetCvar("flashlight_enemies_drop_flashlights").SetBool(true);
        }
        else if (p == TWILIGHT)
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(2);
            CVar.GetCvar("flashlight_enemies_drop_flares").SetBool(true);
            CVar.GetCvar("flashlight_starting_flares").SetInt(5);
            CVar.GetCvar("flashlight_spawn_flare_box").SetInt(1);
            CVar.GetCvar("flashlight_spawn_flare").SetInt(1);
        }
        else if (p == HELL_MODE) //map is pitch black, extremely rare battery recharges, no charging, 100% stealth monsters
        {
            CVar.GetCvar("flashlight_darken_mode").SetInt(3);
            CVar.GetCvar("flashlight_darken_divide_amount").SetFloat(10);
            CVar.GetCvar("flashlight_enemies_drop_flares").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_flares_chance").SetInt(15);
            CVar.GetCvar("flashlight_enemies_drop_flashlights").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_flashlights_chance").SetInt(15);
            CVar.GetCvar("flashlight_enemies_drop_battery").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_battery_expander").SetBool(true);
            CVar.GetCvar("flashlight_enemies_drop_battery_expander_chance").SetInt(1);
            CVar.GetCvar("flashlight_enemies_drop_battery_chance").SetInt(1);
			CVar.GetCvar("flashlight_flare_recharge_enabled").SetBool(true);
            
            //Stealth Monster settings
            CVar.GetCvar("flashlight_stealth_monster_mode").SetInt(2);
            CVar.GetCvar("flashlight_stealth_monster_chance").SetInt(100);
			CVar.GetCvar("flashlight_stealth_player_enabled").SetBool(true);
            
            //battery settings
            CVar.GetCvar("flashlight_battery_max").SetInt(350000);
            CVar.GetCvar("flashlight_spawn_flashlight").SetInt(1);
            CVar.GetCvar("flashlight_battery_min_threshold").SetInt(0);
            CVar.GetCvar("flashlight_battery_use_per_tic").SetInt(1);
            CVar.GetCvar("flashlight_battery_charge_per_tic").SetInt(0);
            CVar.GetCvar("flashlight_spawn_battery_upgrade").SetBool(true);
            CVar.GetCvar("flashlight_spawn_battery_recharge").SetBool(true);
            CVar.GetCvar("flashlight_spawn_battery_upgrade_chance").SetInt(20);
            CVar.GetCvar("flashlight_spawn_battery_recharge_chance").SetInt(100);
        }
    }
}
