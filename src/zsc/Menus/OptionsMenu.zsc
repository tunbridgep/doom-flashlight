//===========================================================================
//
// Adapted from Nash's Tilt++ Menu, hut with significant changes
// I don't normally like to use other people's code without
// explicitly asking for permission, but the Zdoom wiki
// has virtually no documentation on the subject
//
//===========================================================================

mixin class Conditional
{
    int condition_min;
    int condition_max;
    String disabled_text;
 	Cvar conditional;
    
    protected void DrawDisabledText(String text, int y, int color, Font font)
    {
        Screen.DrawText (font, color,
				(Screen.GetWidth() - font.StringWidth (text) * CleanXfac_1) / 2,
				y,
				StringTable.Localize(text),
				DTA_CleanNoMove_1, true);
    }

    protected bool CheckCondition()
    {
        if (conditional)
        {
            int val = conditional.GetInt();
            bool conditional_min = val >= condition_min;
            bool conditional_max = condition_max <= -1 ? true : val <= condition_max;
       	    return conditional_min && conditional_max;
       	}
       	return true;
    }
    
    override bool Selectable()
	{
    	return CheckCondition();
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
	    if (CheckCondition())
	    {
	        return super.Draw(desc,y,indent,selected);
		}
		else
		{
		    String text = disabled_text == "" ? "$DISABLED" : disabled_text;
            DrawDisabledText(text,y,OptionMenuSettings.mFontColorValue,Menu.OptionFont());
            return indent;
		}
	}
}

class OptionMenuItemFlashlightOptionReadOnly : OptionMenuItemOption
{
    override bool Selectable()
	{
    	return false;
	}
}

class OptionMenuItemFlashlightDynamicText : OptionMenuItemStaticText
{

    Cvar c;
    Array<String> labels;

    OptionMenuItemFlashlightDynamicText Init(int color, CVar condition, String l0, String l1, String l2 = "", String l3 = "", String l4 = "", String l5 = "", String l6 = "", String l7 = "", String l8 = "", String l9 = "",  String l10 = "", String l11 = "", String l12 = "", String l13 = "", String l14 = "", String l15 = "", String l16 = "")
    {
        c = condition;
        labels.push(l0);
        labels.push(l1);
        labels.push(l2);
        labels.push(l3);
        labels.push(l4);
        labels.push(l5);
        labels.push(l6);
        labels.push(l7);
        labels.push(l8);
        labels.push(l9);
        labels.push(l10);
        labels.push(l11);
        labels.push(l12);
        labels.push(l13);
        labels.push(l14);
        labels.push(l15);
        labels.push(l16);
    
        Super.Init(l0,color);
        return self;
    }
    
    private String calculateText()
    {
        if (c)
        {
            int val = c.GetInt();
            for (int i = 0;i < labels.size();i++)
            {
                if (val == i)
                    return labels[i];
            }
        }
        return labels[0];
    }
    
    override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
	    mLabel = calculateText();
		return Super.Draw(desc,y,indent,selected);
	}
}

class OptionMenuItemFlashlightOption : OptionMenuItemOption
{
    mixin Conditional;

	OptionMenuItemFlashlightOption Init(String label, Name command, Name values, Cvar conditionalcmd = null, String disabledtext = "", int conditionmin = 1, int conditionmax = -1, CVar graycheck = null, int center = 0 )
	{
  	    conditional = conditionalcmd;
	    condition_min = conditionmin;
	    condition_max = conditionmax;
	    disabled_text = disabledtext;
	
		Super.Init(label, command, values, graycheck, center);
		return self;
	}
}

class OptionMenuItemFlashlightColorPicker : OptionMenuItemColorPicker
{
    mixin Conditional;

	OptionMenuItemColorPicker Init(String label, Name command, Cvar conditionalcmd = null, String disabledtext = "", int conditionmin = 1, int conditionmax = -1)
	{
  	    conditional = conditionalcmd;
	    condition_min = conditionmin;
	    condition_max = conditionmax;
	    disabled_text = disabledtext;
	
		Super.Init(label, command);
		return self;
	}
}

class OptionMenuItemFlashlightSlider : OptionMenuItemSlider
{ 
	mixin Conditional;
	
	OptionMenuItemFlashlightSlider Init(String label, Name command, double min, double max, double step, int showval = 1, Cvar conditionalcmd = null, String disabledtext = "", int conditionmin = 1, int conditionmax = -1)
	{
	    conditional = conditionalcmd;
	    condition_min = conditionmin;
	    condition_max = conditionmax;
	    disabled_text = disabledtext;
	
		Super.Init(label, command, min, max, step, showval);
		return self;
	}
}
