#library "batterydisplay"
#include "zcommon.acs"

#define ONE_TIC 1873

#define CVAR_BATTERY_POSITION "flashlight_battery_display"
#define BATTERY_POSITION_NONE 0
#define BATTERY_POSITION_LEFT_CORNER 1
#define BATTERY_POSITION_RIGHT_CORNER 2
#define BATTERY_POSITION_CROSSHAIR 3

function str GetBatteryLevelIcon(int level, int max, bool red)
{
    int one_sixth = max / 6;
    int two_sixths = one_sixth * 2;
    int three_sixths = one_sixth * 3;
    int four_sixths = one_sixth * 4;
    int five_sixths = one_sixth * 5;

    if (red)
    {
        if (level < one_sixth)
            return "BATTERR6";
        else if (level < two_sixths)
            return "BATTERR5";
        else if (level < three_sixths)
            return "BATTERR4";
        else if (level < four_sixths)
            return "BATTERR3";
        else if (level < five_sixths)
            return "BATTERR2";
        return "BATTERR1";
    }
    else
    {
        if (level < one_sixth)
            return "BATTERY6";
        else if (level < two_sixths)
            return "BATTERY5";
        else if (level < three_sixths)
            return "BATTERY4";
        else if (level < four_sixths)
            return "BATTERY3";
        else if (level < five_sixths)
            return "BATTERY2";
    }
    return "BATTERY1";
}

function str GetFlaresString(void)
{
    int flares = CheckInventory("Flare");
    return StrParam(d:flares);
}

function str GetBatteryUpgradeLevelString(void)
{
    int upgrades = CheckInventory("FlashlightBatteryUpgrade");
    
    switch (upgrades)
    {
        case 1:
            return "+";
        case 2:
            return "++";
        case 3:
            return "+++";
    }
    return StrParam(d:upgrades);
}

function str GetBatteryRechargeLevelString(void)
{
    int recharges = CheckInventory("FlashlightBatteryRecharge");
    return StrParam(d:recharges);
}

function void DrawBatteryIcon(str icon)
{

    int position = GetCVar(CVAR_BATTERY_POSITION);  
    
    if (position == BATTERY_POSITION_NONE)
        return;
    
    int separation = 0.01;
    
    int battery_w;
    int battery_h;
    int text_w;
    int text_h;

    SetFont("CONFONT");
    if (position == BATTERY_POSITION_CROSSHAIR)
    {
        battery_w = 0.5;
        battery_h = 0.6;
        text_w = 0.515;
        text_h = 0.622;
    }
    else if (position == BATTERY_POSITION_LEFT_CORNER)
    {
        battery_w = 0.0;
        battery_h = 0.0;
        text_w = 0.023;
        text_h = 0.05;
    }
    
    else if (position == BATTERY_POSITION_RIGHT_CORNER)
    {
        battery_w = 1.0;
        battery_h = 0.0;
        text_w = 0.977;
        text_h = 0.05;
    }
    
    //draw battery
    SetFont(icon);
    HudMessage(s:"A";HUDMSG_PLAIN, -999, CR_RED, battery_w,battery_h,ONE_TIC);
    
    SetFont("CONFONT");
    HudMessage(s:GetFlaresString();HUDMSG_PLAIN, -996, CR_YELLOW, text_w,text_h,ONE_TIC);
    HudMessage(s:GetBatteryUpgradeLevelString();HUDMSG_PLAIN, -998, CR_YELLOW, text_w,text_h - separation,ONE_TIC);
    HudMessage(s:GetBatteryRechargeLevelString();HUDMSG_PLAIN, -997, CR_YELLOW, text_w,text_h - separation - separation,ONE_TIC);
}

script "draw_battery" (int level, int max, int red)
{
    //stop if we are in the TITLEMAP
    if (GameType() == GAME_TITLE_MAP)
        terminate;
 
    str icon = GetBatteryLevelIcon(level, max, red);
   
   DrawBatteryIcon(icon);
}
